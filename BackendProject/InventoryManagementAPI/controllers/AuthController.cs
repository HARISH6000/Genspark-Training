using InventoryManagementAPI.DTOs;
using InventoryManagementAPI.Interfaces;
using Microsoft.AspNetCore.Mvc;
using InventoryManagementAPI.Exceptions;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;
using System;
using Microsoft.AspNetCore.Authorization; 
using System.Linq;
using System.IdentityModel.Tokens.Jwt;
using InventoryManagementAPI.Utilities;

namespace InventoryManagementAPI.Controllers
{
    [ApiController]
    [ApiVersion("1.0")] 
    [Route("api/v{version:apiVersion}/[controller]")] 
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;
        private readonly ILogger<AuthController> _logger;
        private readonly ITokenBlacklistService _tokenBlacklistService;

        public AuthController(IAuthService authService, ILogger<AuthController> logger,ITokenBlacklistService tokenBlacklistService)
        {
            _authService = authService;
            _logger = logger;
            _tokenBlacklistService = tokenBlacklistService;
        }

        
        [HttpPost("login")]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(LoginResponseDto))]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Login([FromBody] UserLoginDto userLoginDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState); 
            }

            try
            {
                var response = await _authService.Login(userLoginDto);
                return Ok(response);
            }
            catch (UnauthorizedAccessException ex)
            {
                _logger.LogWarning(ex, "Authentication failed for user '{Username}': {Message}", userLoginDto.Username, ex.Message);
                return Unauthorized(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unexpected error occurred during login for user '{Username}'.", userLoginDto.Username);
                return StatusCode(StatusCodes.Status500InternalServerError, new { message = "An unexpected error occurred during login." });
            }
        }

        [HttpPost("refresh")]
        [Authorize] // Requires a valid (even if expiring) token to be present for claims extraction
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(LoginResponseDto))]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> RefreshToken()
        {
            try
            {
                // The 'User' property holds the ClaimsPrincipal for the current authenticated user
                var response = await _authService.RefreshToken(User);
                return Ok(response);
            }
            catch (UnauthorizedAccessException ex)
            {
                _logger.LogWarning(ex, "Token refresh failed: {Message}", ex.Message);
                return Unauthorized(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unexpected error occurred during token refresh.");
                return StatusCode(StatusCodes.Status500InternalServerError, new { message = "An unexpected error occurred during token refresh." });
            }
        }

        [Authorize] // User must be authenticated to logout their token
        [HttpPost("logout")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Logout()
        {
            try
            {
                // Get the JWT from the Authorization header
                var token = HttpContext.Request.Headers["Authorization"].FirstOrDefault()?.Split(" ").Last();

                if (string.IsNullOrEmpty(token))
                {
                    return Unauthorized(new { message = "No token provided." });
                }

                var tokenHandler = new JwtSecurityTokenHandler();
                var jwtToken = tokenHandler.ReadToken(token) as JwtSecurityToken;

                if (jwtToken == null || string.IsNullOrEmpty(jwtToken.Id))
                {
                    // If JTI is missing (e.g., token not generated by our service or invalid), cannot blacklist
                    return BadRequest(new { message = "Invalid token format or missing JWT ID (JTI)." });
                }

                // Get expiration from the token (in UTC)
                var expiration = jwtToken.ValidTo;

                // Add JTI to blacklist with its original expiration date
                await _tokenBlacklistService.AddTokenToBlacklist(jwtToken.Id, expiration);

                _logger.LogInformation("User {Username} (ID: {UserId}) logged out. Token JTI: {Jti}",
                    User.Identity?.Name, User.GetUserId(), jwtToken.Id); // Assuming User.GetUserId() is an extension method

                return Ok(new { message = "Successfully logged out." });
            }
            catch (InvalidOperationException ex) // Catch if token is already blacklisted
            {
                _logger.LogWarning(ex, "Logout failed: {Message}", ex.Message);
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unexpected error occurred during logout.");
                return StatusCode(StatusCodes.Status500InternalServerError, new { message = "An unexpected error occurred during logout." });
            }
        }
    }
}
